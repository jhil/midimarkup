{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/midi-freq/index.js","parser.js","node_modules/music-notation/memoize.js","node_modules/music-notation/note/parse.js","node_modules/music-notation/note/regex.js","node_modules/note-midi/index.js","node_modules/soundfont-player/lib/b64decode.js","node_modules/soundfont-player/lib/buffers-player.js","node_modules/soundfont-player/lib/decode-buffer.js","node_modules/soundfont-player/lib/index.js","node_modules/soundfont-player/lib/load-bank.js","node_modules/soundfont-player/lib/oscillator-player.js","src/js/parser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","freq","tuning","midi","arguments","m","Math","pow",2,"fn","cache","str",3,"memoize","R","BASES","C","D","E","F","G","A","B","exec","base","toUpperCase","alt","replace","fifths","oct","dur","substring","../memoize","./regex",4,5,"parse","note","p","Array","isArray","window","music-notation/note/parse",6,"b64ToUint6","nChr","base64DecodeToArray","sBase64","nBlocksSize","sB64Enc","nInLen","nOutLen","ceil","taBytes","Uint8Array","nMod3","nMod4","nUint24","nOutIdx","nInIdx","charCodeAt",7,"ctx","buffers","options","gain","destination","time","duration","buffer","source","createBufferSource","vca","createGain","value","connect","start","stop","note-midi",8,"context","data","Promise","done","reject","decodedData","split","decodeAudioData","./b64decode.js",9,"loadBank","oscillatorPlayer","buffersPlayer","Soundfont","nameToUrl","this","gleitzUrl","instruments","promises","prototype","instrument","name","inst","play","promise","then","push","onready","cb","loadBuffers","./buffers-player","./load-bank","./oscillator-player",10,"decodeBuffer","url","get","getContent","parseJavascript","resolve","decodeBank","bank","req","XMLHttpRequest","open","onload","status","response","statusText","onerror","send","begin","indexOf","end","lastIndexOf","JSON","slice","Object","keys","map","all","./decode-buffer",11,"vcoType","vco","createOscillator","type","frequency","midi-freq",12,"soundfont","AudioContext","listOfPlayers","TIEMPO","MEASURE","OCTAVE","soundPlay","Audio","soundStop","$","document","keydown","shiftKey","keyCode","children","attr","togglePlay","preventDefault","on","click","playing","stopAll","x","console","log","lines","text","trim","trackCommands","parseMarkup","addTimes","playTrack","commands","key","timeStart","instructions","step","markup","output","notes","noteToKey","keyToNote","instrumentSetting","token","match","input","parseFloat","parseInt","cmd","charAt","number2key","soundfont-player"],"mappings":"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","file":"parser.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Get the pitch frequency in herzs (with custom concert tuning) from a midi number\n *\n * This function is currified so it can be partially applied (see examples)\n *\n * @name midi.freq\n * @function\n * @param {Float} tuning - the frequency of A4 (null means 440)\n * @param {Integer} midi - the midi number\n * @return {Float} the frequency of the note\n *\n * @example\n * var freq = require('midi-freq')\n * // 69 midi is A4\n * freq(null, 69) // => 440\n * freq(444, 69) // => 444\n *\n * @example\n * // partially applied\n * var freq = require('midi-freq')(440)\n * freq(69) // => 440\n */\nmodule.exports = function freq (tuning, midi) {\n  tuning = tuning || 440\n  if (arguments.length > 1) return freq(tuning)(midi)\n\n  return function (m) {\n    return m > 0 && m < 128 ? Math.pow(2, (m - 69) / 12) * tuning : null\n  }\n}\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * Get the pitch frequency in herzs (with custom concert tuning) from a midi number\n *\n * This function is currified so it can be partially applied (see examples)\n *\n * @name midi.freq\n * @function\n * @param {Float} tuning - the frequency of A4 (null means 440)\n * @param {Integer} midi - the midi number\n * @return {Float} the frequency of the note\n *\n * @example\n * var freq = require('midi-freq')\n * // 69 midi is A4\n * freq(null, 69) // => 440\n * freq(444, 69) // => 444\n *\n * @example\n * // partially applied\n * var freq = require('midi-freq')(440)\n * freq(69) // => 440\n */\nmodule.exports = function freq (tuning, midi) {\n  tuning = tuning || 440\n  if (arguments.length > 1) return freq(tuning)(midi)\n\n  return function (m) {\n    return m > 0 && m < 128 ? Math.pow(2, (m - 69) / 12) * tuning : null\n  }\n}\n\n},{}],2:[function(require,module,exports){\n'use strict'\n\n/**\n * A simple and fast memoization function\n *\n * It helps creating functions that convert from string to pitch in array format.\n * Basically it does two things:\n * - ensure the function only receives strings\n * - memoize the result\n *\n * @name memoize\n * @function\n * @private\n */\nmodule.exports = function (fn) {\n  var cache = {}\n  return function (str) {\n    if (typeof str !== 'string') return null\n    return (str in cache) ? cache[str] : cache[str] = fn(str)\n  }\n}\n\n},{}],3:[function(require,module,exports){\n'use strict'\n\nvar memoize = require('../memoize')\nvar R = require('./regex')\nvar BASES = { C: [0, 0], D: [2, -1], E: [4, -2], F: [-1, 1], G: [1, 0], A: [3, -1], B: [5, -2] }\n\n/**\n * Get a pitch in [array notation]()\n * from a string in [scientific pitch notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation)\n *\n * The string to parse must be in the form of: `letter[accidentals][octave]`\n * The accidentals can be up to four # (sharp) or b (flat) or two x (double sharps)\n *\n * This function is cached for better performance.\n *\n * @name note.parse\n * @function\n * @param {String} str - the string to parse\n * @return {Array} the note in array notation or null if not valid note\n *\n * @example\n * var parse = require('music-notation/note/parse')\n * parse('C') // => [ 0 ]\n * parse('c#') // => [ 8 ]\n * parse('c##') // => [ 16 ]\n * parse('Cx') // => [ 16 ] (double sharp)\n * parse('Cb') // => [ -6 ]\n * parse('db') // => [ -4 ]\n * parse('G4') // => [ 2, 3, null ]\n * parse('c#3') // => [ 8, -1, null ]\n */\nmodule.exports = memoize(function (str) {\n  var m = R.exec(str)\n  if (!m || m[5]) return null\n\n  var base = BASES[m[1].toUpperCase()]\n  var alt = m[2].replace(/x/g, '##').length\n  if (m[2][0] === 'b') alt *= -1\n  var fifths = base[0] + 7 * alt\n  if (!m[3]) return [fifths]\n  var oct = +m[3] + base[1] - 4 * alt\n  var dur = m[4] ? +(m[4].substring(1)) : null\n  return [fifths, oct, dur]\n})\n\n},{\"../memoize\":2,\"./regex\":4}],4:[function(require,module,exports){\n'use strict'\n\n/**\n * A regex for matching note strings in scientific notation.\n *\n * The note string should have the form `letter[accidentals][octave][/duration]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - duration: (Optional) anything follows a slash `/` is considered to be the duration\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * @name note.regex\n * @example\n * var R = require('music-notation/note/regex')\n * R.exec('c#4') // => ['c#4', 'c', '#', '4', '', '']\n */\nmodule.exports = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)(\\/\\d+|)\\s*(.*)\\s*$/\n\n},{}],5:[function(require,module,exports){\n'use strict'\n\nvar parse = require('music-notation/note/parse')\n\n/**\n * Get the midi number of a note\n *\n * If the argument passed to this function is a valid midi number, it returns it\n *\n * The note can be an string in scientific notation or\n * [array pitch notation](https://github.com/danigb/music.array.notation)\n *\n * @name midi\n * @function\n * @param {String|Array|Integer} note - the note in string or array notation.\n * If the parameter is a valid midi number it return it as it.\n * @return {Integer} the midi number\n *\n * @example\n * var midi = require('note-midi')\n * midi('A4') // => 69\n * midi('a3') // => 57\n * midi([0, 2]) // => 36 (C2 in array notation)\n * midi(60) // => 60\n * midi('C') // => null (pitch classes don't have midi number)\n */\nfunction midi (note) {\n  if ((typeof note === 'number' || typeof note === 'string') &&\n    note > 0 && note < 128) return +note\n  var p = Array.isArray(note) ? note : parse(note)\n  if (!p || p.length < 2) return null\n  return p[0] * 7 + p[1] * 12 + 12\n}\n\nif (typeof module === 'object' && module.exports) module.exports = midi\nif (typeof window !== 'undefined') window.midi = midi\n\n},{\"music-notation/note/parse\":3}],6:[function(require,module,exports){\n'use strict';\n\nfunction b64ToUint6 (nChr) {\n  return nChr > 64 && nChr < 91 ?\n      nChr - 65\n    : nChr > 96 && nChr < 123 ?\n      nChr - 71\n    : nChr > 47 && nChr < 58 ?\n      nChr + 4\n    : nChr === 43 ?\n      62\n    : nChr === 47 ?\n      63\n    :\n      0;\n\n}\n\n// Decode Base64 to Uint8Array\n// ---------------------------\nfunction base64DecodeToArray(sBase64, nBlocksSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\n  var nInLen = sB64Enc.length;\n  var nOutLen = nBlocksSize ?\n    Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize :\n    nInLen * 3 + 1 >> 2;\n  var taBytes = new Uint8Array(nOutLen);\n\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3;\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n      }\n      nUint24 = 0;\n    }\n  }\n  return taBytes;\n}\n\nmodule.exports = base64DecodeToArray;\n\n},{}],7:[function(require,module,exports){\n'use strict'\n\nvar midi = require('note-midi')\n\n/**\n * Create a soundfont buffers player\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} buffers - a midi number to audio buffer hash map\n * @param {Hash} options - (Optional) a hash of options:\n * - gain: the output gain (default: 2)\n * - destination: the destination of the player (default: `ac.destination`)\n */\nmodule.exports = function (ctx, buffers, options) {\n  options = options || {}\n  var gain = options.gain || 2\n  var destination = options.destination || ctx.destination\n\n  return function (note, time, duration) {\n    var m = note > 0 && note < 128 ? note : midi(note)\n    var buffer = buffers[m]\n    if (!buffer) return\n    var source = ctx.createBufferSource()\n    source.buffer = buffer\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n    source.connect(vca)\n    vca.connect(destination)\n\n    source.start(time)\n    if (duration > 0) source.stop(time + duration)\n    return source\n  }\n}\n\n},{\"note-midi\":5}],8:[function(require,module,exports){\n'use strict'\n\nvar base64DecodeToArray = require('./b64decode.js')\n\n/**\n * Given a base64 encoded audio data, return a prmomise with an audio buffer\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {String} data - the base64 encoded audio data\n * @return {Promise} a promise that resolves to an [audio buffer](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer)\n * @api private\n */\nmodule.exports = function (context, data) {\n  return new Promise(function (done, reject) {\n    var decodedData = base64DecodeToArray(data.split(',')[1]).buffer\n    context.decodeAudioData(decodedData, function (buffer) {\n      done(buffer)\n    }, function (e) {\n      reject('DecodeAudioData error', e)\n    })\n  })\n}\n\n},{\"./b64decode.js\":6}],9:[function(require,module,exports){\n'use strict'\n\nvar loadBank = require('./load-bank')\nvar oscillatorPlayer = require('./oscillator-player')\nvar buffersPlayer = require('./buffers-player')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl || gleitzUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = { name: name, play: oscillatorPlayer(ctx, options) }\n  this.instruments[name] = inst\n  var promise = loadBank(ctx, this.nameToUrl(name)).then(function (buffers) {\n    inst.play = buffersPlayer(ctx, buffers, options)\n    return inst\n  })\n  this.promises.push(promise)\n  inst.onready = function (cb) { promise.then(cb) }\n  return inst\n}\n\nSoundfont.loadBuffers = function (ctx, name) {\n  var nameToUrl = Soundfont.nameToUrl || gleitzUrl\n  return loadBank(ctx, nameToUrl(name))\n}\n\n/*\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @returns {String} the Soundfont file url\n */\nfunction gleitzUrl (name) {\n  return 'https://cdn.rawgit.com/gleitz/midi-js-Soundfonts/master/FluidR3_GM/' + name + '-ogg.js'\n}\n\nif (typeof module === 'object' && module.exports) module.exports = Soundfont\nif (typeof window !== 'undefined') window.Soundfont = Soundfont\n\n},{\"./buffers-player\":7,\"./load-bank\":10,\"./oscillator-player\":11}],10:[function(require,module,exports){\n'use strict'\n\nvar midi = require('note-midi')\nvar decodeBuffer = require('./decode-buffer')\n\n/**\n * Load a soundfont bank\n *\n * @param {AudioContext} ctx - the audio context object\n * @param {String} url - the url of the js file\n * @param {Function} get - (Optional) given a url return a promise with the contents\n * @param {Function} parse - (Optinal) given a js file return JSON object\n */\nmodule.exports = function (ctx, url, get, parse) {\n  get = get || getContent\n  parse = parse || parseJavascript\n  return Promise.resolve(url).then(get).then(parse)\n    .then(function (data) {\n      return { ctx: ctx, data: data, buffers: {} }\n    })\n    .then(decodeBank)\n    .then(function (bank) { return bank.buffers })\n}\n\nfunction getContent (url) {\n  return new Promise(function (done, reject) {\n    var req = new window.XMLHttpRequest()\n    req.open('GET', url)\n\n    req.onload = function () {\n      if (req.status === 200) {\n        done(req.response)\n      } else {\n        reject(Error(req.statusText))\n      }\n    }\n    req.onerror = function () {\n      reject(Error('Network Error'))\n    }\n    req.send()\n  })\n}\n\n/**\n *  Parse the SoundFont data and return a JSON object\n *  (SoundFont data are .js files wrapping json data)\n *\n * @param {String} data - the SoundFont js file content\n * @return {JSON} the parsed data as JSON object\n * @api private\n */\nfunction parseJavascript (data) {\n  var begin = data.indexOf('MIDI.Soundfont.')\n  begin = data.indexOf('=', begin) + 2\n  var end = data.lastIndexOf(',')\n  return JSON.parse(data.slice(begin, end) + '}')\n}\n\n/*\n * Decode a bank\n * @param {Object} bank - the bank object\n * @return {Promise} a promise that resolves to the bank with the buffers decoded\n * @api private\n */\nfunction decodeBank (bank) {\n  var promises = Object.keys(bank.data).map(function (note) {\n    return decodeBuffer(bank.ctx, bank.data[note])\n    .then(function (buffer) {\n      bank.buffers[midi(note)] = buffer\n    })\n  })\n\n  return Promise.all(promises).then(function () {\n    return bank\n  })\n}\n\n},{\"./decode-buffer\":8,\"note-midi\":5}],11:[function(require,module,exports){\n'use strict'\n\nvar freq = require('midi-freq')(440)\nvar midi = require('note-midi')\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} options - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.2)\n * - destination: the player destination (default: ac.destination)\n */\nmodule.exports = function (ctx, options) {\n  options = options || {}\n  var destination = options.destination || ctx.destination\n  var vcoType = options.vcoType || 'sine'\n  var gain = options.gain || 0.2\n\n  return function (note, time, duration) {\n    var f = freq(midi(note))\n    if (!f) return\n\n    duration = duration || 0.2\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = f\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n\n},{\"midi-freq\":1,\"note-midi\":5}],12:[function(require,module,exports){\n\"use strict\";\n\nvar soundfont,\n    ctx = new AudioContext(),\n    listOfPlayers = [],\n    TIEMPO = 120.0,\n    MEASURE = 60.0 / TIEMPO * 4.0,\n    OCTAVE = 4,\n    soundPlay = new Audio(\"/img/play.mp3\"),\n    soundStop = new Audio(\"/img/stop.mp3\"),\n    Soundfont = require('soundfont-player');\n\n$(document).keydown(function (e) {\n  if (e.shiftKey && e.keyCode == 13) {\n    if ($('#play-toggle').children(\"img\").attr('src') == '/img/icon-play.svg') {\n      soundStop.play();\n    } else {\n      soundPlay.play();\n    }\n    soundfont = new Soundfont(ctx);\n    togglePlay();\n    e.preventDefault();\n  }\n});\n\n$('#play-toggle').on({\n  'click': function click() {\n    soundPlay.play();\n  }\n});\n\n$('#stop-toggle').on({\n  'click': function click() {\n    soundStop.play();\n  }\n});\n\nvar playing = false;\n\nvar togglePlay = function togglePlay() {\n  if (playing) stopAll();else play();\n  playing = !playing;\n};\n\nvar stopAll = function stopAll() {\n  for (var x in listOfPlayers) {\n    console.log(listOfPlayers);\n    listOfPlayers[x].stop(0);\n  }\n  listOfPlayers = [];\n};\n\nvar play = function play() {\n  console.log(\"play!\");\n\n  var lines = $('.track').text().trim().split('\\n');\n  for (var x in lines) {\n    lines[x] = lines[x].trim();\n  }for (var i = 0; i < lines.length; i++) {\n    var trackCommands = parseMarkup(lines[i].trim());\n    trackCommands = addTimes(trackCommands);\n\n    playTrack(trackCommands);\n  }\n};\n\nvar playTrack = function playTrack(commands) {\n  var time = 0;\n\n  for (var x = 0; x < commands.length; x++) {\n\n    (function (x) {\n      var key = commands[x].key,\n          time = commands[x].timeStart,\n          duration = commands[x].duration,\n          instrument = commands[x].instrument;\n\n      if (key) {\n        var inst = soundfont.instrument(instrument);\n        inst.onready(function () {\n          console.log(key + \": \" + time + \": \" + duration);\n          var note = inst.play(key, time, MEASURE * duration);\n          listOfPlayers.push(note);\n        });\n      }\n    })(x);\n  }\n};\n\nvar addTimes = function addTimes(instructions) {\n  var time = 0.0;\n  for (var x in instructions) {\n    var step = instructions[x];\n    step.timeStart = time;\n    time = time + MEASURE * step.duration;\n  }\n  return instructions;\n};\n\nvar parseMarkup = function parseMarkup(markup) {\n  var output = [],\n      notes = markup.toUpperCase().split(\" \");\n\n  for (var x in notes) {\n    var key = noteToKey(notes[x]);\n    if (key) {\n      key.key = keyToNote(key.key);\n      output.push(key);\n    }\n  }\n  return output;\n};\n\nvar instrumentSetting = 'acoustic_grand_piano';\n\nvar noteToKey = function noteToKey(token) {\n  var key = -1,\n      duration = 1;\n\n  if (token.length > 3) {\n    switch (token) {\n      case (token.match(/^[T][0-9]{3}\\b/) || {}).input:\n        TIEMPO = parseFloat(token.substring(1));\n        MEASURE = 60.0 / TIEMPO * 4.0;\n        console.log(\"new tiempo: \" + TIEMPO);\n        return;\n      case (token.match(/(OCTAVE)[0-9]{1}\\b/) || {}).input:\n        OCTAVE = parseInt(token.substring(6));\n        return;\n      case \"PIANO\":\n        instrumentSetting = 'acoustic_grand_piano';\n        return;\n      case \"DRUMS\":\n        instrumentSetting = 'gunshot';\n        return;\n      case \"GUITAR\":\n        instrumentSetting = 'acoustic_guitar_steel';\n        return;\n      case \"SAXOPHONE\":\n        instrumentSetting = 'alto_sax';\n        return;\n      case \"TRUMPET\":\n        instrumentSetting = 'trumpet';\n        return;\n      case \"VIOLIN\":\n        instrumentSetting = 'violin';\n        return;\n      case \"FLUTE\":\n        instrumentSetting = 'flute';\n        return;\n      default:\n        return;\n    }\n  }\n\n  for (var x in token) {\n    var cmd = token.charAt(x);\n    switch (cmd) {\n      case 'A':\n        key = 69;\n        break;\n      case 'B':\n        key = 71;\n        break;\n      case 'C':\n        key = 60;\n        break;\n      case 'D':\n        key = 62;\n        break;\n      case 'E':\n        key = 64;\n        break;\n      case 'F':\n        key = 65;\n        break;\n      case 'G':\n        key = 67;\n        break;\n      case '+':\n        if (key === -1) return;\n        key++;\n        break;\n      case '-':\n        if (key === -1) return;\n        key--;\n        break;\n      case ';':\n        key = -1;\n        break;\n      case '1':\n        duration = 1.0;\n        break;\n      case '2':\n        duration = 0.5;\n        break;\n      case '4':\n        duration = 0.25;\n        break;\n      case '8':\n        duration = 0.125;\n        break;\n      default:\n        return;\n    }\n  }\n  return {\n    key: key,\n    duration: duration,\n    instrument: instrumentSetting\n  };\n};\n\nvar keyToNote = function keyToNote(key) {\n  var number2key = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  return number2key[key % 12] + OCTAVE;\n};\n\n},{\"soundfont-player\":9}]},{},[12])\n\n","'use strict'\n\n/**\n * A simple and fast memoization function\n *\n * It helps creating functions that convert from string to pitch in array format.\n * Basically it does two things:\n * - ensure the function only receives strings\n * - memoize the result\n *\n * @name memoize\n * @function\n * @private\n */\nmodule.exports = function (fn) {\n  var cache = {}\n  return function (str) {\n    if (typeof str !== 'string') return null\n    return (str in cache) ? cache[str] : cache[str] = fn(str)\n  }\n}\n","'use strict'\n\nvar memoize = require('../memoize')\nvar R = require('./regex')\nvar BASES = { C: [0, 0], D: [2, -1], E: [4, -2], F: [-1, 1], G: [1, 0], A: [3, -1], B: [5, -2] }\n\n/**\n * Get a pitch in [array notation]()\n * from a string in [scientific pitch notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation)\n *\n * The string to parse must be in the form of: `letter[accidentals][octave]`\n * The accidentals can be up to four # (sharp) or b (flat) or two x (double sharps)\n *\n * This function is cached for better performance.\n *\n * @name note.parse\n * @function\n * @param {String} str - the string to parse\n * @return {Array} the note in array notation or null if not valid note\n *\n * @example\n * var parse = require('music-notation/note/parse')\n * parse('C') // => [ 0 ]\n * parse('c#') // => [ 8 ]\n * parse('c##') // => [ 16 ]\n * parse('Cx') // => [ 16 ] (double sharp)\n * parse('Cb') // => [ -6 ]\n * parse('db') // => [ -4 ]\n * parse('G4') // => [ 2, 3, null ]\n * parse('c#3') // => [ 8, -1, null ]\n */\nmodule.exports = memoize(function (str) {\n  var m = R.exec(str)\n  if (!m || m[5]) return null\n\n  var base = BASES[m[1].toUpperCase()]\n  var alt = m[2].replace(/x/g, '##').length\n  if (m[2][0] === 'b') alt *= -1\n  var fifths = base[0] + 7 * alt\n  if (!m[3]) return [fifths]\n  var oct = +m[3] + base[1] - 4 * alt\n  var dur = m[4] ? +(m[4].substring(1)) : null\n  return [fifths, oct, dur]\n})\n","'use strict'\n\n/**\n * A regex for matching note strings in scientific notation.\n *\n * The note string should have the form `letter[accidentals][octave][/duration]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - duration: (Optional) anything follows a slash `/` is considered to be the duration\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * @name note.regex\n * @example\n * var R = require('music-notation/note/regex')\n * R.exec('c#4') // => ['c#4', 'c', '#', '4', '', '']\n */\nmodule.exports = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)(\\/\\d+|)\\s*(.*)\\s*$/\n","'use strict'\n\nvar parse = require('music-notation/note/parse')\n\n/**\n * Get the midi number of a note\n *\n * If the argument passed to this function is a valid midi number, it returns it\n *\n * The note can be an string in scientific notation or\n * [array pitch notation](https://github.com/danigb/music.array.notation)\n *\n * @name midi\n * @function\n * @param {String|Array|Integer} note - the note in string or array notation.\n * If the parameter is a valid midi number it return it as it.\n * @return {Integer} the midi number\n *\n * @example\n * var midi = require('note-midi')\n * midi('A4') // => 69\n * midi('a3') // => 57\n * midi([0, 2]) // => 36 (C2 in array notation)\n * midi(60) // => 60\n * midi('C') // => null (pitch classes don't have midi number)\n */\nfunction midi (note) {\n  if ((typeof note === 'number' || typeof note === 'string') &&\n    note > 0 && note < 128) return +note\n  var p = Array.isArray(note) ? note : parse(note)\n  if (!p || p.length < 2) return null\n  return p[0] * 7 + p[1] * 12 + 12\n}\n\nif (typeof module === 'object' && module.exports) module.exports = midi\nif (typeof window !== 'undefined') window.midi = midi\n","'use strict';\n\nfunction b64ToUint6 (nChr) {\n  return nChr > 64 && nChr < 91 ?\n      nChr - 65\n    : nChr > 96 && nChr < 123 ?\n      nChr - 71\n    : nChr > 47 && nChr < 58 ?\n      nChr + 4\n    : nChr === 43 ?\n      62\n    : nChr === 47 ?\n      63\n    :\n      0;\n\n}\n\n// Decode Base64 to Uint8Array\n// ---------------------------\nfunction base64DecodeToArray(sBase64, nBlocksSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\n  var nInLen = sB64Enc.length;\n  var nOutLen = nBlocksSize ?\n    Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize :\n    nInLen * 3 + 1 >> 2;\n  var taBytes = new Uint8Array(nOutLen);\n\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3;\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n      }\n      nUint24 = 0;\n    }\n  }\n  return taBytes;\n}\n\nmodule.exports = base64DecodeToArray;\n","'use strict'\n\nvar midi = require('note-midi')\n\n/**\n * Create a soundfont buffers player\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} buffers - a midi number to audio buffer hash map\n * @param {Hash} options - (Optional) a hash of options:\n * - gain: the output gain (default: 2)\n * - destination: the destination of the player (default: `ac.destination`)\n */\nmodule.exports = function (ctx, buffers, options) {\n  options = options || {}\n  var gain = options.gain || 2\n  var destination = options.destination || ctx.destination\n\n  return function (note, time, duration) {\n    var m = note > 0 && note < 128 ? note : midi(note)\n    var buffer = buffers[m]\n    if (!buffer) return\n    var source = ctx.createBufferSource()\n    source.buffer = buffer\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n    source.connect(vca)\n    vca.connect(destination)\n\n    source.start(time)\n    if (duration > 0) source.stop(time + duration)\n    return source\n  }\n}\n","'use strict'\n\nvar base64DecodeToArray = require('./b64decode.js')\n\n/**\n * Given a base64 encoded audio data, return a prmomise with an audio buffer\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {String} data - the base64 encoded audio data\n * @return {Promise} a promise that resolves to an [audio buffer](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer)\n * @api private\n */\nmodule.exports = function (context, data) {\n  return new Promise(function (done, reject) {\n    var decodedData = base64DecodeToArray(data.split(',')[1]).buffer\n    context.decodeAudioData(decodedData, function (buffer) {\n      done(buffer)\n    }, function (e) {\n      reject('DecodeAudioData error', e)\n    })\n  })\n}\n","'use strict'\n\nvar loadBank = require('./load-bank')\nvar oscillatorPlayer = require('./oscillator-player')\nvar buffersPlayer = require('./buffers-player')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl || gleitzUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = { name: name, play: oscillatorPlayer(ctx, options) }\n  this.instruments[name] = inst\n  var promise = loadBank(ctx, this.nameToUrl(name)).then(function (buffers) {\n    inst.play = buffersPlayer(ctx, buffers, options)\n    return inst\n  })\n  this.promises.push(promise)\n  inst.onready = function (cb) { promise.then(cb) }\n  return inst\n}\n\nSoundfont.loadBuffers = function (ctx, name) {\n  var nameToUrl = Soundfont.nameToUrl || gleitzUrl\n  return loadBank(ctx, nameToUrl(name))\n}\n\n/*\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @returns {String} the Soundfont file url\n */\nfunction gleitzUrl (name) {\n  return 'https://cdn.rawgit.com/gleitz/midi-js-Soundfonts/master/FluidR3_GM/' + name + '-ogg.js'\n}\n\nif (typeof module === 'object' && module.exports) module.exports = Soundfont\nif (typeof window !== 'undefined') window.Soundfont = Soundfont\n","'use strict'\n\nvar midi = require('note-midi')\nvar decodeBuffer = require('./decode-buffer')\n\n/**\n * Load a soundfont bank\n *\n * @param {AudioContext} ctx - the audio context object\n * @param {String} url - the url of the js file\n * @param {Function} get - (Optional) given a url return a promise with the contents\n * @param {Function} parse - (Optinal) given a js file return JSON object\n */\nmodule.exports = function (ctx, url, get, parse) {\n  get = get || getContent\n  parse = parse || parseJavascript\n  return Promise.resolve(url).then(get).then(parse)\n    .then(function (data) {\n      return { ctx: ctx, data: data, buffers: {} }\n    })\n    .then(decodeBank)\n    .then(function (bank) { return bank.buffers })\n}\n\nfunction getContent (url) {\n  return new Promise(function (done, reject) {\n    var req = new window.XMLHttpRequest()\n    req.open('GET', url)\n\n    req.onload = function () {\n      if (req.status === 200) {\n        done(req.response)\n      } else {\n        reject(Error(req.statusText))\n      }\n    }\n    req.onerror = function () {\n      reject(Error('Network Error'))\n    }\n    req.send()\n  })\n}\n\n/**\n *  Parse the SoundFont data and return a JSON object\n *  (SoundFont data are .js files wrapping json data)\n *\n * @param {String} data - the SoundFont js file content\n * @return {JSON} the parsed data as JSON object\n * @api private\n */\nfunction parseJavascript (data) {\n  var begin = data.indexOf('MIDI.Soundfont.')\n  begin = data.indexOf('=', begin) + 2\n  var end = data.lastIndexOf(',')\n  return JSON.parse(data.slice(begin, end) + '}')\n}\n\n/*\n * Decode a bank\n * @param {Object} bank - the bank object\n * @return {Promise} a promise that resolves to the bank with the buffers decoded\n * @api private\n */\nfunction decodeBank (bank) {\n  var promises = Object.keys(bank.data).map(function (note) {\n    return decodeBuffer(bank.ctx, bank.data[note])\n    .then(function (buffer) {\n      bank.buffers[midi(note)] = buffer\n    })\n  })\n\n  return Promise.all(promises).then(function () {\n    return bank\n  })\n}\n","'use strict'\n\nvar freq = require('midi-freq')(440)\nvar midi = require('note-midi')\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} options - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.2)\n * - destination: the player destination (default: ac.destination)\n */\nmodule.exports = function (ctx, options) {\n  options = options || {}\n  var destination = options.destination || ctx.destination\n  var vcoType = options.vcoType || 'sine'\n  var gain = options.gain || 0.2\n\n  return function (note, time, duration) {\n    var f = freq(midi(note))\n    if (!f) return\n\n    duration = duration || 0.2\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = f\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n","var soundfont, \n    ctx = new AudioContext(),\n    listOfPlayers = [],\n    TIEMPO = 120.0,\n    MEASURE = 60.0/TIEMPO * 4.0,\n    OCTAVE = 4,\n    soundPlay = new Audio(\"/img/play.mp3\"),\n    soundStop = new Audio(\"/img/stop.mp3\"),\n    Soundfont = require('soundfont-player');\n\n$( document ).keydown(function (e) {\n  if(e.shiftKey && e.keyCode == 13){\n    if($('#play-toggle').children(\"img\").attr('src') == '/img/icon-play.svg') {\n      soundStop.play();\n    } else {\n      soundPlay.play();\n    }\n    soundfont = new Soundfont(ctx);\n    togglePlay();\n    e.preventDefault();\n  }\n});\n\n$('#play-toggle').on({\n  'click': function(){\n    soundPlay.play();\n  }\n});\n\n$('#stop-toggle').on({\n  'click': function(){\n    soundStop.play();\n  }\n});\n\nvar playing = false;\n\nvar togglePlay = function () {\n  if (playing) \n    stopAll();\n  else\n    play();\n  playing = !playing;\n};\n\nvar stopAll = function () {\n  for (var x in listOfPlayers) {\n    console.log(listOfPlayers);\n    listOfPlayers[x].stop(0);\n  }\n  listOfPlayers = [];\n};\n\nvar play = function () {\n  console.log(\"play!\");\n\n  var lines = $('.track').text().trim().split('\\n');\n  for (var x in lines)\n    lines[x] = lines[x].trim();\n\n  for (var i = 0; i < lines.length; i++){\n    var trackCommands = parseMarkup(lines[i].trim());\n    trackCommands = addTimes(trackCommands);\n\n    playTrack(trackCommands);\n  }\n};\n\nvar playTrack = function ( commands ) {\n  var time = 0;\n\n  for ( var x = 0; x < commands.length; x++ ) {\n\n    (function(x) {\n      var key        = commands[x].key,\n          time       = commands[x].timeStart,\n          duration   = commands[x].duration,\n          instrument = commands[x].instrument;\n\n      if (key) {\n        var inst = soundfont.instrument(instrument);\n        inst.onready(function() {\n          console.log(key + \": \" + time + \": \" + duration);\n          var note = inst.play(key, time, MEASURE * duration);\n          listOfPlayers.push(note);\n        });\n      }\n    })(x);\n  }\n};\n\nvar addTimes = function ( instructions ) {\n  var time = 0.0;\n  for (var x in instructions) {\n    var step = instructions[x];\n    step.timeStart = time;\n    time = time + MEASURE * step.duration;\n  }\n  return instructions;\n};\n\nvar parseMarkup = function( markup ) {\n  var output = [],\n      notes = markup.toUpperCase().split(\" \");\n\n  for (var x in notes) {  \n    var key = noteToKey(notes[x]);\n    if (key) {\n      key.key = keyToNote(key.key);\n      output.push(key);\n    } \n  }\n  return output; \n};\n\nvar instrumentSetting = 'acoustic_grand_piano';\n\nvar noteToKey = function( token ) {\n  var key = -1,\n      duration = 1;\n\n  if (token.length > 3) {\n    switch (token) {\n      case (token.match(/^[T][0-9]{3}\\b/) || {}).input:\n        TIEMPO = parseFloat(token.substring(1));\n        MEASURE = 60.0/TIEMPO * 4.0;\n        console.log(\"new tiempo: \" + TIEMPO);\n        return;\n      case (token.match(/(OCTAVE)[0-9]{1}\\b/) || {}).input:\n        OCTAVE = parseInt(token.substring(6));\n        return;\n      case \"PIANO\":\n        instrumentSetting = 'acoustic_grand_piano';\n        return;\n      case \"DRUMS\":\n        instrumentSetting = 'gunshot';\n        return;\n      case \"GUITAR\":\n        instrumentSetting = 'acoustic_guitar_steel';\n        return;\n      case \"SAXOPHONE\":\n        instrumentSetting = 'alto_sax';\n        return;\n      case \"TRUMPET\":\n        instrumentSetting = 'trumpet';\n        return;\n      case \"VIOLIN\":\n        instrumentSetting = 'violin';\n        return;\n      case \"FLUTE\":\n        instrumentSetting = 'flute'\n        return;\n      default:\n        return;\n    }\n  }\n\n  for (var x in token) {\n    var cmd = token.charAt(x);\n    switch( cmd ) {\n      case 'A':\n        key = 69;\n        break;\n      case 'B':\n        key = 71;\n        break;\n      case 'C':\n        key = 60;\n        break;\n      case 'D':\n        key = 62;\n        break;\n      case 'E':\n        key = 64;\n        break;\n      case 'F':\n        key = 65;\n        break;\n      case 'G':\n        key = 67;\n        break;\n      case '+':\n        if (key === -1) return;\n        key++;\n        break;\n      case '-':\n        if (key === -1) return;\n        key--;\n        break;\n      case ';':\n        key = -1;\n        break;\n      case '1':\n        duration = 1.0;\n        break;\n      case '2':\n        duration = 0.5;\n        break;\n      case '4':\n        duration = 0.25;\n        break;\n      case '8':\n        duration = 0.125;\n        break;\n      default:\n        return;\n    } \n  }\n  return {\n      key: key, \n      duration: duration, \n      instrument: instrumentSetting \n    };\n};\n\nvar keyToNote = function ( key ) {\n  var number2key = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  return number2key[ key % 12] + OCTAVE;\n};\n"],"sourceRoot":"/source/"}